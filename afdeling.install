<?php

/**
 * Implements hook_install().
 */
function afdeling_install() {
  // Create node type.
  node_types_rebuild();
  $types = node_type_get_types();
  node_type_save($types['afdeling']);

  variable_set('comment_afdeling', 1); // COMMENT_NODE_CLOSED

  // Create link field.
  if (!field_info_field('link')) {
    $field = array(
        'field_name' => 'link',
        'type' => 'link_field', // text
    );
    field_create_field($field);
 
    // Create the instance on the bundle.
    $instance = array(
      'field_name' => 'link',
      'entity_type' => 'node',
      'label' => 'Link',
      'bundle' => 'afdeling',
      'required' => FALSE, // default: FALSE
      'settings' => array(
         // Here you inform either or not you want this field showing up on the registration form.
        'user_register_form' => 0,
      ),
      'widget' => array(
        'type' => 'link',
      ),
    );
    field_create_instance($instance);
  }

  // Create provincie term reference.
  if (!field_info_field('provincie')) {
    $field = array(
      'field_name' => 'provincie',
      'type' => 'taxonomy_term_reference',
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => 'provincie',
            'parent' => 0
          ),
        ),
      ),
    );
    field_create_field($field);
    $instance = array(
      'field_name' => 'provincie',
      'entity_type' => 'node',
      'label' => 'Provincie',
      'bundle' => 'afdeling',
      'required' => FALSE,
      'widget' => array(
        'type' => 'options_select'
      ),
    );
    field_create_instance($instance);
  }

  // Create province vocabulary.
  $vocabulary = (object) array(
      'name' => 'Provincies',
      'description' => 'This vocabulary contains a list of provinces.',
      'machine_name' => 'provincie',
      );  
  taxonomy_vocabulary_save($vocabulary);

  // Add terms.
  $vocabulary = taxonomy_vocabulary_machine_name_load('provincie');
  $provincenames = array(
    'Groningen',
    'Friesland',
    'Drenthe',
    'Overijssel',
    'Flevoland',
    'Gelderland',
    'Utrecht',
    'Noord-Holland',
    'Zuid-Holland',
    'Zeeland',
    'Noord-Brabant',
    'Limburg',
  );

  foreach ($provincenames as $provincename) {
    $term = (object) array(
        'name' => $provincename,
        'vid' => $vocabulary->vid,
        );

    taxonomy_term_save($term);
  }

  // Create regio term reference.
  if (!field_info_field('regio')) {
    $field = array(
      'field_name' => 'regio',
      'type' => 'taxonomy_term_reference',
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => 'regio',
            'parent' => 0
          ),
        ),
      ),
    );
    field_create_field($field);
    $instance = array(
      'field_name' => 'regio',
      'entity_type' => 'node',
      'label' => 'Regio',
      'bundle' => 'afdeling',
      'required' => FALSE,
      'widget' => array(
        'type' => 'options_select'
      ),
    );
    field_create_instance($instance);
  }

  // Create region vocabulary.
  $vocabulary = (object) array(
      'name' => 'Regios',
      'description' => 'This vocabulary contains a list of regions.',
      'machine_name' => 'regio',
      );  
  taxonomy_vocabulary_save($vocabulary);

  // Add terms.
  $vocabulary = taxonomy_vocabulary_machine_name_load('regio');
  $regionnames = array(
    'Drenthe',
    'Flevoland',
    'Friesland',
    'Gelderland Noord-en-Oost',
    'Gelderland Zuid',
    'Groningen',
    'Haaglanden',
    'Limburg Noord',
    'Limburg Zuid',
    'Noord-Brabant NoordOost',
    'Noord-Brabant West',
    'Noord-Brabant Zuidoost',
    'Noord-Holland Midden',
    'Noord-Holland Noord',
    'Noord-Holland Zuid',
    'Overijssel',
    'Rijnmond Oost',
    'Rijnmond West',
    'Utrecht',
    'Zeeland',
    'Zuid-Holland Noord',
  );

  foreach ($regionnames as $regionname) {
    $term = (object) array(
        'name' => $regionname,
        'vid' => $vocabulary->vid,
        );

    taxonomy_term_save($term);
  }

  // Create status field.
  if (!field_info_field('afd_status')) {
    $field = array(
        'field_name' => 'afd_status',
        'type' => 'text', // text
    );
    field_create_field($field);
 
    // Create the instance on the bundle.
    $instance = array(
      'field_name' => 'afd_status',
      'entity_type' => 'node',
      'label' => 'Status',
      'bundle' => 'afdeling',
      'required' => FALSE, // default: FALSE
      'settings' => array(
         // Here you inform either or not you want this field showing up on the registration form.
        'user_register_form' => 0,
      ),
      'widget' => array(
        'type' => 'text_textfield',
      ),
    );
    field_create_instance($instance);
  }

  // Create id field.
  if (!field_info_field('afd_id')) {
    $field = array(
        'field_name' => 'afd_id',
        'type' => 'number_integer',
    );
    field_create_field($field);
 
    // Create the instance on the bundle.
    $instance = array(
      'field_name' => 'afd_id',
      'entity_type' => 'node',
      'label' => 'Afdeling id',
      'bundle' => 'afdeling',
      'required' => FALSE, // default: FALSE
      'settings' => array(
         // Here you inform either or not you want this field showing up on the registration form.
        'user_register_form' => 0,
      ),
      'widget' => array(
        'type' => 'number',
      ),
    );
    field_create_instance($instance);
  }

  // Email field.
  if (!field_info_field('afd_email')) {
    $field = array(
        'field_name' => 'afd_email',
        'type' => 'text',
    );
    field_create_field($field);
 
    // Create the instance on the bundle.
    $instance = array(
      'field_name' => 'afd_email',
      'entity_type' => 'node',
      'label' => 'Afdeling email',
      'bundle' => 'afdeling',
      'required' => FALSE, // default: FALSE
      'settings' => array(
         // Here you inform either or not you want this field showing up on the registration form.
        'user_register_form' => 0,
      ),
      'widget' => array(
        'type' => 'text_textfield',
      ),
    );
    field_create_instance($instance);
  }

}

/**
 * Implements hook_uninstall
 */
function afdeling_uninstall(){
  // Nodes types defined with hook_node_info are supposedly automaticly deleted on uninstall.
  node_type_delete('afdeling');
  // Delete fields.
  field_delete_field('link'); // removes field from the system
  field_delete_field('provincie'); // removes field from the system
  field_delete_field('regio'); // removes field from the system
  field_delete_field('afd_status'); // removes field from the system
  field_delete_field('afd_id'); // removes field from the system
  field_delete_field('afd_email'); // removes field from the system
  // Delete vocabulary.
  $vocabulary = taxonomy_vocabulary_machine_name_load('provincie');
  taxonomy_vocabulary_delete($vocabulary->vid);
  $vocabulary = taxonomy_vocabulary_machine_name_load('regio');
  taxonomy_vocabulary_delete($vocabulary->vid);
}

function afdeling_update_7001(&$sandbox) {
  // Create status field.
  if (!field_info_field('afd_status')) {
    $field = array(
        'field_name' => 'afd_status',
        'type' => 'text', // text
    );
    field_create_field($field);
 
    // Create the instance on the bundle.
    $instance = array(
      'field_name' => 'afd_status',
      'entity_type' => 'node',
      'label' => 'Status',
      'bundle' => 'afdeling',
      'required' => FALSE, // default: FALSE
      'settings' => array(
         // Here you inform either or not you want this field showing up on the registration form.
        'user_register_form' => 0,
      ),
      'widget' => array(
        'type' => 'text_textfield',
      ),
    );
    field_create_instance($instance);
  }
}

function afdeling_update_7002(&$sandbox) {
  // Create id field.
  if (!field_info_field('afd_id')) {
    $field = array(
        'field_name' => 'afd_id',
        'type' => 'number_integer', // text
    );
    field_create_field($field);
 
    // Create the instance on the bundle.
    $instance = array(
      'field_name' => 'afd_id',
      'entity_type' => 'node',
      'label' => 'Afdeling id',
      'bundle' => 'afdeling',
      'required' => FALSE, // default: FALSE
      'settings' => array(
         // Here you inform either or not you want this field showing up on the registration form.
        'user_register_form' => 0,
      ),
      'widget' => array(
        'type' => 'number',
      ),
    );
    field_create_instance($instance);
  }
}

function afdeling_update_7003(&$sandbox) {
  // Create email field.
  if (!field_info_field('afd_email')) {
    $field = array(
        'field_name' => 'afd_email',
        'type' => 'text',
    );
    field_create_field($field);
 
    // Create the instance on the bundle.
    $instance = array(
      'field_name' => 'afd_email',
      'entity_type' => 'node',
      'label' => 'Afdeling email',
      'bundle' => 'afdeling',
      'required' => FALSE, // default: FALSE
      'settings' => array(
         // Here you inform either or not you want this field showing up on the registration form.
        'user_register_form' => 0,
      ),
      'widget' => array(
        'type' => 'text_textfield',
      ),
    );
    field_create_instance($instance);
  }
}
